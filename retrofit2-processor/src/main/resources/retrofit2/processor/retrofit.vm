## Template for each generated Retrofit_Foo class.
## This template uses the Apache Velocity Template Language (VTL).
## The variables ($pkg, $props, and so on) are defined by the fields of MutableRetrofitTemplateVars.
##
## Comments, like this one, begin with ##. The comment text extends up to and including the newline
## character at the end of the line. So comments also serve to join a line to the next one.
## Velocity deletes a newline after a directive (#if, #foreach, #end etc) so ## is not needed there.
## That does mean that we sometimes need an extra blank line after such a directive.
##
## A post-processing step will remove unwanted spaces and blank lines, but will not join two lines.

#if (!$pkg.empty)
package $pkg;
#end

#foreach ($i in $imports)
import $i;
#end

import org.json.JSONObject;
import org.json.JSONException;

import rx.Observable;
import rx.Subscriber;
import rx.functions.*;

import com.bluelinelabs.logansquare.LoganSquare;

import android.util.Log;

import java.util.List;
import java.util.ArrayList;

import com.squareup.okhttp.*;
import java.io.IOException;
import retrofit.converter.*;
import java.io.*;
import retrofit.mime.*;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import com.google.gson.Gson;
//import com.google.gson.reflect.TypeToken;
import retrofit2.TypeToken;
import retrofit2.RequestException;

/**
 * @see "https://github.com/square/okhttp/wiki/Recipes"
 */
${gwtCompatibleAnnotation}
public final class $subclass$formalTypes extends $origClass$actualTypes {

    final OkHttpClient client;
    public static final String _MIME_APP_JSON = "applications/json";
    public static final String _CHARSET_UTF8 = "charset=utf-8";
    public static final String _MIME_APP_JSON_CHARSET_UTF8 = _MIME_APP_JSON + "; " + _CHARSET_UTF8;
    Converter converter;

## Constructor

    public $subclass() {
        this(null);
    }

    public $subclass(Converter converter) {
        client = new OkHttpClient();

        this.converter = converter;
        if (this.converter == null) {
            try {
                /**
                 * Parse JsonArray
                 * gson.fromJson(jsonString, Wrapper[].class);
                 * mapper.readValue(jsonString, typeFactory.constructCollectionType(List.class, SomeClass.class));
                 */

                //this.converter = new JacksonConverter();
                //this.converter = new GsonConverter(new Gson());
                this.converter = new LoganSquareConverter();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /*
        int cacheSize = 10 * 1024 * 1024; // 10 MiB
        Cache cache = new Cache(cacheDirectory, cacheSize);

        client = new OkHttpClient();
        client.setCache(cache);
        */
    }


## Property getters

#foreach ($p in $props)

    @Override
    ${p.access}${p.type} ${p.getter}(${p.args}) {

// if ($p.path.matches("^http://") && $p.path.matches("^https://"))

        String _url = "${p.path}";
        if (!_url.startsWith("http://") && !_url.startsWith("https://")) {
            _url = "${baseUrl}" + _url;
        }

    #if (!$p.queries.isEmpty())

        StringBuilder _sb = new StringBuilder();
        _sb.append(_url);
        _sb.append("?");

        #foreach ($query in $p.queries.entrySet())

        _sb.append("${query.key}");
        _sb.append("=");
        _sb.append($query.value);

            #if ($foreach.hasNext)

        _sb.append("&");

            #end
        #end

        Request.Builder requestBuilder = new Request.Builder().url(_sb.toString());

    #else

        Request.Builder requestBuilder = new Request.Builder().url(_url);

    #end

    #if ($p.get)

    #elseif ($p.post)
        #if ($p.body && $p.body != "")

        String jsonString = null;
        TypedOutput typedOutput = null;
        try {
            typedOutput = converter.toBody($p.body);
            jsonString = toString(typedOutput);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        //if (jsonString == null) throw new NullPointerException();
        requestBuilder.post(RequestBody.create(MediaType.parse(typedOutput.mimeType()), jsonString));

        #elseif (!$p.fields.isEmpty())

        FormEncodingBuilder formBuilder = new FormEncodingBuilder();

            #foreach ($field in $p.fields.entrySet())

        formBuilder.add("$field.key", $field.value);

            #end

        requestBuilder.post(formBuilder.build());

        #end
    #elseif ($p.put)
        #if (!$p.parts.isEmpty())

        MultipartBuilder partsBuilder = new MultipartBuilder().type(MultipartBuilder.FORM);

            #foreach ($part in $p.parts.entrySet())
                #if ($part.value.typedFile)

                // TypedFile
        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
            RequestBody.create(MediaType.parse(${part.value.name}.mimeType()), ${part.value.name}.file()));

                #elseif ($part.value.typedString)

        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
            RequestBody.create(MediaType.parse(${part.value.name}.mimeType()), ${part.value.name}.toString()));

                #elseif ($part.value.typedByteArray)

        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
            RequestBody.create(MediaType.parse(${part.value.name}.mimeType()), ${part.value.name}.getBytes()));

                #elseif ($part.value.mimeType != "")

                // File elseif (part.value.isFile)

        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
            RequestBody.create(MediaType.parse("${part.value.mimeType}"), ${part.value.name}));


                #else

        partsBuilder.addFormDataPart("${part.key}", ${part.value.name});

                #end
            #end

        requestBuilder.put(partsBuilder.build());

        #else

        requestBuilder.put(RequestBody.create(MediaType.parse(_MIME_APP_JSON_CHARSET_UTF8), ""));

        #end

    #elseif ($p.delete)

        requestBuilder.delete();

    #end

    #foreach ($header in $p.headers.entrySet())

        requestBuilder.addHeader("$header.key", $header.value);

    #end

        return Observable.create(new OnSubscribeResponse(client, requestBuilder.build())).map(new Func1<Response, String>() {
            @Override public String call(Response response) {
                try {
                    return response.body().string();
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        }).filter(new Func1<String, Boolean>() {
            @Override public Boolean call(String json) {
                return json != null;
            }
        }).map(new Func1<String, $p.typeArgs>() {
            @Override public $p.typeArgs call(String json) {
                // TODO Using RetrofitConveter
                try {
                    System.out.println(json);

                    //TypeReference<${p.typeArgs}> ref = new TypeReference<>() {};
                    //Type type = ((ParameterizedType) ref.getType()).getRawType();

        #if ($p.typeArgs2 != "")

                    //jsonMapper.readValue(jsonString, (Class<List<String>>) List.class);

                    //Type type = new Array${p.typeArgs}().getClass().getGenericSuperclass();
                    // return (${p.typeArgs}) converter.fromBody(new JsonTypedInput(json), (Class<${p.typeArgs}>) List.class);
                    //Type type = new Array${p.typeArgs}().getClass().getGenericSuperclass();
                    //Type type = new Array${p.typeArgs}().getClass();
                    Type type = new TypeToken<${p.typeArgs}>(){}.getType();
                    return (${p.typeArgs}) converter.fromBody(new JsonTypedInput(json), type);

        #else

                    return (${p.typeArgs}) converter.fromBody(new JsonTypedInput(json), ${p.typeArgs}.class);

        #end

                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        }).filter(new Func1<$p.typeArgs, Boolean>() {
            @Override public Boolean call($p.typeArgs object) {
                return object != null;
            }
        });
    }

#end

    // TODO onUnSubscribe to call.cancel();
    public static class OnSubscribeResponse implements Observable.OnSubscribe<Response> {
        final Request request;
        final OkHttpClient client;

        public OnSubscribeResponse(OkHttpClient client, Request request) {
            this.request = request;
            this.client = client;
        }

        @Override
        public void call(final Subscriber<? super Response> sub) {
            try {
                client.newCall(request).enqueue(new Callback() {
                    @Override public void onFailure(Request r, IOException e) {
                        sub.onError(new RequestException(r, e));
                    }
                    @Override public void onResponse(Response response) {
                        sub.onNext(response);
                        sub.onCompleted();
                    }
                });
            } catch (Exception e) {
                sub.onError(e);
            }
        }
    }

    public static class JsonTypedInput implements TypedInput {
        public static final String MIME_APP_JSON = "applications/json";
        public static final String CHARSET_UTF8 = "charset=utf-8";
        public static final String MIME_APP_JSON_CHARSET_UTF8 = MIME_APP_JSON + "; " + _CHARSET_UTF8;
        private final byte[] bytes;
        private final InputStream in;

        public JsonTypedInput(String json) {
            bytes = json.getBytes(); // json.getBytes(java.nio.charset.StandardCharsets.UTF_8.toString());
            in = new ByteArrayInputStream(json.getBytes());
        }

        @Override public InputStream in() {
            return in;
        }
        @Override public long length() {
            return bytes.length;
        }
        @Override public String mimeType() {
            return MIME_APP_JSON_CHARSET_UTF8;
        }
    }

    public static String toString(TypedOutput typedOutput) {
        String string = null;
        try {
            ByteArrayOutputStream bytesOutputStream = new ByteArrayOutputStream();
            typedOutput.writeTo(bytesOutputStream);
            string = bytesOutputStream.toString(); // bytesOutputStream.toString(java.nio.charset.StandardCharsets.UTF_8.toString());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return string;
    }
}
